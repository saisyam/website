
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Dockers on Saisyam</title>
   <link>https://saisyam.com/tags/dockers/</link>
   <description>Recent content in Dockers on Saisyam</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2020 - Saisyam</copyright>
   <lastBuildDate>Thu, 15 Oct 2020 00:00:00 +0000</lastBuildDate>
   
       <atom:link href="https://saisyam.com/tags/dockers/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>How to scrape Google reviews using Python</title>
       <link>https://saisyam.com/how-to-scrape-google-reviews-using-python/</link>
       <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
       
       <guid>https://saisyam.com/how-to-scrape-google-reviews-using-python/</guid>
       <description>&lt;p&gt;This post explains how to scrape Google reviews using Python. We use two popular Python packages extensively used for scraping, &lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34;&gt;BeautifulSoup&lt;/a&gt; and &lt;a href=&#34;https://splinter.readthedocs.io/en/latest/&#34;&gt;Splinter&lt;/a&gt;. Though the process or the code snippets can be used to scrape reviews for any business listed in Google, but I am more interested in scraping reviews for restaurants in US. So, Let&amp;rsquo;s get started.&lt;/p&gt;&lt;div id=&#34;toc&#34;&gt;    &lt;nav id=&#34;TableOfContents&#34;&gt;  &lt;ul&gt;    &lt;li&gt;&lt;a href=&#34;#identify-businesses-to-scrape&#34;&gt;Identify businesses to scrape&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#scraping-business-information&#34;&gt;Scraping business information&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#scraping-the-reviews-page&#34;&gt;Scraping the reviews page&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/nav&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;identify-businesses-to-scrape&#34;&gt;Identify businesses to scrape&lt;/h2&gt;&lt;p&gt;First thing we need to do is to identity the businesses we want to scrape. As I mentioned earlier, I am interested in restaurants in US. Let&amp;rsquo;s stick to restaurants in New York state. Below is the URL and the image of the business, &lt;a href=&#34;https://www.google.com/maps/place/Breslin+Burger/@40.745568,-73.990283,17z/data=!4m5!3m4!1s0x89c259a61b874f57:0xc5fd887f907ea722!8m2!3d40.745568!4d-73.988089&#34;&gt;&lt;strong&gt;Breslin Berger&lt;/strong&gt;&lt;/a&gt; we want to scrape.&lt;img src=&#34;https://saisyam.com/breslin_burger.png&#34; alt=&#34;Breslin Burger&#34; title=&#34;Breslin Burger&#34;&gt;We would like to get the following information from the above page (&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;RED&lt;/strong&gt;&lt;/span&gt; markings):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Image of the restaurant&lt;/li&gt;&lt;li&gt;Restaurant name&lt;/li&gt;&lt;li&gt;Overall rating and number of reviews&lt;/li&gt;&lt;li&gt;Type of the restaurant&lt;/li&gt;&lt;li&gt;Location of the restaurant&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Clicking on &lt;code&gt;reviews&lt;/code&gt; will take you to the reviews page.&lt;img src=&#34;https://saisyam.com/breslin_burger_reviews.png&#34; alt=&#34;Breslin Burger Reviews&#34; title=&#34;Breslin Burger Reviews&#34;&gt;We want the latest reviews, so we sort the reviews by &lt;code&gt;latest&lt;/code&gt; and then scrape them.&lt;/p&gt;&lt;h2 id=&#34;scraping-business-information&#34;&gt;Scraping business information&lt;/h2&gt;&lt;p&gt;Google uses dynamic ids and class names in it&amp;rsquo;s pages which make scraping a bit complex. We use different attributes other than ids and classes to get the elements. We use &lt;code&gt;Splinter&lt;/code&gt; to load the page as it contains JavaScript. Get the &lt;code&gt;html&lt;/code&gt; from Splinter &lt;code&gt;Browser&lt;/code&gt; component and use &lt;code&gt;BeautifulSoup&lt;/code&gt; to scrape the content. The following code snippet will scrape the business information:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_business_info&lt;/span&gt;(url):    business &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}    business[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base_url&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url    browser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Browser(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chrome&amp;#34;&lt;/span&gt;, headless&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)    browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;visit(url)    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)    soup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BeautifulSoup(browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;html5lib&amp;#34;&lt;/span&gt;)    img_div &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_one(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div[class*=&amp;#34;section-hero-header-image-hero-container&amp;#34;]&amp;#39;&lt;/span&gt;)    img &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; img_div&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;img&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;)    business[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; img    addr_button &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_one(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;button[data-item-id=&amp;#34;address&amp;#34;]&amp;#39;&lt;/span&gt;)    addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addr_button[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aria-label&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Address: &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()    business[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;address&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addr    business_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_one(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h1[class*=&amp;#34;header-title-title&amp;#34;]&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()    business[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; business_name    rating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ol&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;section-star-array&amp;#34;&lt;/span&gt;})[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aria-label&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stars&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()    business[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rating&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(rating)    total_reviews &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_one(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;button:-soup-contains(&amp;#34;reviews&amp;#34;)&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text    business[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;review_count&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(total_reviews&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))     res_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_one(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div[class=&amp;#34;gm2-body-2&amp;#34;]&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text    business[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res_type&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;·&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)    business[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;source&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Google&amp;#34;&lt;/span&gt;    reviews_button &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by_text(total_reviews)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;click()    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)    business[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reviews_url&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url    browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quit()    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; business&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I have used &lt;code&gt;select_one&lt;/code&gt; method from BeautifulSoup which finds only the first element that matches the selector. The beauty of this method is we can look for partial selectors as well. This method uses &lt;code&gt;Pseudo-Classes&lt;/code&gt;. I have used &lt;code&gt;:-soup-contains&lt;/code&gt; in the above code to get the button element that has &lt;code&gt;reviews&lt;/code&gt; in the text. Refer to this &lt;a href=&#34;https://facelessuser.github.io/soupsieve/selectors/pseudo-classes/&#34;&gt;link&lt;/a&gt; to know more about Pseudo-Classes.&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;p&gt;The output of the above method is a python dictionary:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;{    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;base_url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.google.com/maps/place/Breslin+Burger/@40.745568,-73.990283,17z/data=!3m1!4b1!4m5!3m4!1s0x89c259a61b874f57:0xc5fd887f907ea722!8m2!3d40.745568!4d-73.988089&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;img&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://lh5.googleusercontent.com/p/AF1QipOQV1HUtfhIRxtict4owToQkQpQHbCJZ_KsW83e=w491-h240-k-no&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;16 W 29th St, New York, NY 10001, United States&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Breslin Burger&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rating&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4.3&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;review_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1125&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hamburger restaurant&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Google&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews_url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.google.com/maps/place/Breslin+Burger/@40.745568,-73.9902777,17z/data=!4m7!3m6!1s0x89c259a61b874f57:0xc5fd887f907ea722!8m2!3d40.745568!4d-73.988089!9m1!1b1&amp;#34;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;scraping-the-reviews-page&#34;&gt;Scraping the reviews page&lt;/h2&gt;&lt;p&gt;We have to sort the reviews by latest. We load the page in Splinter Browser component and do the click actions to sort the reviews. Once the page loads with sorted by latest reviews we will scroll the page until we get the desired number of reviews. Google uses dynamic loading of reviews, so we have to scroll down to load the next set of reviews. I just need 300 latest reviews, ofcourse, count is a parameter to the scraping function.&lt;/p&gt;&lt;p&gt;The following code snippet will scroll the page until we get the desired number of reviews:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_html&lt;/span&gt;(url, count):    browser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Browser(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chrome&amp;#34;&lt;/span&gt;, headless&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)    browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;visit(url)    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;# sort and select newest for the list&lt;/span&gt;    browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by_text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sort&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;click()    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)    new_menu_item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by_id(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action-menu&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by_tag(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ul&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by_tag(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;li&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]    new_menu_item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;click()    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)    rlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_review_count(browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html)    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; rlen &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; count:        browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute_script(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;document.querySelector(&amp;#34;div.section-layout.section-scrollbox&amp;#34;).scrollTop = document.querySelector(&amp;#34;div.section-layout.section-scrollbox&amp;#34;).scrollHeight&amp;#39;&lt;/span&gt;)        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)        rlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_review_count(browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html)    html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html    browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quit()    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; html&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_review_count&lt;/span&gt;(html):    soup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BeautifulSoup(html, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;html5lib&amp;#34;&lt;/span&gt;)    reviews &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_all(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data-review-id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aria-label&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;})    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(reviews)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;p&gt;The following code will do the scraping of the loaded reviews:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_reviews&lt;/span&gt;(html):    soup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BeautifulSoup(html, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;html5lib&amp;#34;&lt;/span&gt;)    reviews &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_all(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data-review-id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aria-label&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;})    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; reviews:           user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aria-label&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;)        review_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data-review-id&amp;#39;&lt;/span&gt;]        content_div &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data-review-id&amp;#39;&lt;/span&gt;: review_id})        stars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; content_div&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;role&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;})[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aria-label&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()        rating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(stars&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])        date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; content_div&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_one(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;span[class*=&amp;#34;-date&amp;#34;]&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()        text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; content_div&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_one(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;span[class*=&amp;#34;-text&amp;#34;]&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(text) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(Translated by Google)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; text:                 text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(Translated by Google) &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(Original)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; text:                    idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(Original)&amp;#34;&lt;/span&gt;)                    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:idx]        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; {            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rating&amp;#34;&lt;/span&gt;: rating,            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: review_id,            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;: user,            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;: dateparser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(date)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-%m-%Y&amp;#34;&lt;/span&gt;),            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;review&amp;#34;&lt;/span&gt;: text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;)        }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;We have learnt how to use &lt;code&gt;BeautifulSoup&lt;/code&gt; and &lt;code&gt;Splinter&lt;/code&gt; Python packages to scrape Google reviews. The complete scraper code is available from my &lt;a href=&#34;https://github.com/saisyam/reviews-scraper&#34;&gt;Github repo&lt;/a&gt;. In the future articles we will see how to analyze these reviews to extract some important insights about the business. Thanks for reading.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Run Python Scraper as Google Cloud Function</title>
       <link>https://saisyam.com/run-python-scraper-as-google-cloud-function/</link>
       <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
       
       <guid>https://saisyam.com/run-python-scraper-as-google-cloud-function/</guid>
       <description>&lt;p&gt;Web scrapers run on a regular basis to extract information. Today every application irrespective of size is deployed on Cloud providers like AWS, Google Cloud and Azure. In this article we will see how to deploy our Ebay product scraper as Google cloud function.&lt;/p&gt;&lt;div id=&#34;toc&#34;&gt;    &lt;nav id=&#34;TableOfContents&#34;&gt;  &lt;ul&gt;    &lt;li&gt;&lt;a href=&#34;#why-cloud&#34;&gt;Why Cloud?&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#what-are-google-cloud-functions&#34;&gt;What are Google Cloud Functions?&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#deploy-scraper-as-google-cloud-function&#34;&gt;Deploy scraper as Google Cloud Function&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/nav&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;why-cloud&#34;&gt;Why Cloud?&lt;/h2&gt;&lt;p&gt;Today cloud providers offers more services than simply providing machines or infrastructure. The main reason for going to cloud deployments are auto scaling, monitoring, ease of deployment, faster delivery process, wide range of infrastructure options suitable for different types of applications and ofcourse cost. Cloud deployments show considerable cost saving when compared to managing own infrastructure. More details about cloud is out of scope of this article.&lt;/p&gt;&lt;h2 id=&#34;what-are-google-cloud-functions&#34;&gt;What are Google Cloud Functions?&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Cloud Functions allows you to trigger your code from Google Cloud, Firebase, and Google Assistant, or call it directly from any web, mobile, or backend application via HTTP. You are only billed for your function&amp;rsquo;s execution time, metered to the nearest 100 milliseconds.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You pay for what you use. In this article we will deploy a simple ebay product scraper as a Google Cloud function.Our Ebay scraper is built using &lt;code&gt;BeautifulSoup&lt;/code&gt; library. This scraper will extract the necessary information of a product given its URL. For example, given this URL &lt;a href=&#34;https://www.ebay.com/itm/203449771112?hash=item2f5e8d2468:g:0zcAAOSwssFgnD-K&amp;amp;var=503791306328&#34;&gt;https://www.ebay.com/itm/203449771112?hash=item2f5e8d2468:g:0zcAAOSwssFgnD-K&amp;amp;var=503791306328&lt;/a&gt; to the scraper we will get the following result:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Travis Scott Dunks Low&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ebay_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;203449771112&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;images&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://i.ebayimg.com/images/g/0zcAAOSwssFgnD-K/s-l1600.png&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://i.ebayimg.com/images/g/kZ4AAOSwUKBgnD-K/s-l1600.png&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;US &lt;/span&gt;$220&lt;span style=&#34;color:#e6db74&#34;&gt;.00&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shipping&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FREE&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Condition&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A brand-new, unused, and unworn item (including handmade items) in the original packaging (such as&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UK Shoe Size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UK 11&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Customized&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Features&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Limited Edition, Comfort, Cushioned&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Model&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Travis Scott Dunks&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Department&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Men&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Product Line&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nike Dunk Low, Nike SB, Nike Dunk&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pattern&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Solid&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AU Shoe Size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AU 11.5&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EU Shoe Size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EUR 42.5&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Performance/Activity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Skateboarding&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;US Shoe Size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Shoe Width&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Insole Material&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fabric&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Brand&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nike&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Shoe Shaft Style&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Low Top&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Style&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sneaker&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Vintage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Beige&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Upper Material&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Leather&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Theme&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Retro&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country/Region of Manufacture&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Singapore&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Character Family&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Friends&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year Manufactured&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Athletic&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.ebay.com/itm/203449771112?hash=item2f5e8d2468:g:0zcAAOSwssFgnD-K&amp;amp;var=503791306328&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Refer to my &lt;a href=&#34;https://github.com/saisyam/scraper-on-cloud/blob/main/ebay-scraper/ebay.py&#34;&gt;ebay.py&lt;/a&gt; file for the scraper.&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;deploy-scraper-as-google-cloud-function&#34;&gt;Deploy scraper as Google Cloud Function&lt;/h2&gt;&lt;p&gt;To deploy our scraper we need to create a file called &lt;code&gt;main.py&lt;/code&gt; in the same folder where we have our scraper. Add the following code to &lt;code&gt;main.py&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scrape_ebay&lt;/span&gt;(request):    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;HTTP Cloud Function.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Args:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        request (flask.Request): The request object.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;lt;https://flask.palletsprojects.com/en/1.1.x/api/#incoming-request-data&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        The response text, or any set of values that can be turned into a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Response object using `make_response`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;lt;https://flask.palletsprojects.com/en/1.1.x/api/#flask.make_response&amp;gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Note:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        For more information on how Flask integrates with Cloud&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Functions, see the `Writing HTTP functions` page.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;lt;https://cloud.google.com/functions/docs/writing/http#http_frameworks&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; scrape_ebay_product(url)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;scrape_ebay&lt;/code&gt; is the Cloud function that we call using a HTTP request. We pass URL, in our case Ebay product URL as a query parameter. We will see the response as json. To deploy the cloud function you need &lt;code&gt;gcloud&lt;/code&gt; application on your system. You have to create a project on Google cloud and initialize &lt;code&gt;gcloud&lt;/code&gt; to use that project to deploy this cloud function. Use the below command to deploy:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ gcloud functions deploy scrape_ebay --runtime python38 --trigger-http --allow-unauthenticated&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the above command is successful, you will get the URL to run your cloud function. Something like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;https://&amp;lt;region-project&amp;gt;.cloudfunctions.net/scrape_ebay&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can add the Ebay URL as query parameter:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;https://&amp;lt;region-project&amp;gt;.cloudfunctions.net/scrape_ebay?url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://www.ebay.com/itm/203449771112?hash&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;item2f5e8d2468:g:0zcAAOSwssFgnD-K&amp;amp;var&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;503791306328&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you see any errors fix them. To run cloud functions two basic things are important:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Enable billing on your project&lt;/li&gt;&lt;li&gt;Enable Cloud Build API&lt;/li&gt;&lt;/ol&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;You will have &lt;a href=&#34;https://cloud.google.com/sdk/gcloud/reference/functions/deploy&#34;&gt;more options&lt;/a&gt; during the deployment. For example, you can set the memory required for your function to run. The complete source code of the project is available &lt;a href=&#34;https://github.com/saisyam/scraper-on-cloud/&#34;&gt;here&lt;/a&gt;. The major advantage of Google cloud functions when compared to AWS Lambda is, Google cloud functions respect &lt;code&gt;requirements.txt&lt;/code&gt; file to install dependencies, where as in AWS Lambda you need to bundle all your dependencies. Thanks for reading.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Install FreeSWITCH 1.10.5 on Ubuntu 18.04</title>
       <link>https://saisyam.com/install-freeswitch-1.10.5-on-ubuntu-18.04/</link>
       <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
       
       <guid>https://saisyam.com/install-freeswitch-1.10.5-on-ubuntu-18.04/</guid>
       <description>&lt;p&gt;&lt;a href=&#34;https://freeswitch.com/&#34;&gt;FreeSWITCH&lt;/a&gt; is a Software Defined Telecom Stack enabling the digital transformation from proprietary telecom switches to a versatile software implementation that runs on any commodity hardware. From a Raspberry PI to a multi-core server, FreeSWITCH can unlock the telecommunications potential of any device.&lt;/p&gt;&lt;div id=&#34;toc&#34;&gt;    &lt;nav id=&#34;TableOfContents&#34;&gt;  &lt;ul&gt;    &lt;li&gt;&lt;a href=&#34;#build-freeswitch-from-source&#34;&gt;Build FreeSWITCH from source&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#setup-ubuntu-1804-server&#34;&gt;Setup Ubuntu 18.04 server&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#install-dependent-packages-to-compile-freeswitch&#34;&gt;Install dependent packages to compile FreeSWITCH&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#compile-and-build-spandsp-and-sofia-sip&#34;&gt;Compile and build SpanDSP and sofia-sip&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#download-freeswitch-source-build-and-install&#34;&gt;Download FreeSWITCH source, build and install&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#make-freeswitch-to-run-as-a-service&#34;&gt;Make FreeSWITCH to run as a service&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/nav&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;build-freeswitch-from-source&#34;&gt;Build FreeSWITCH from source&lt;/h2&gt;&lt;p&gt;FreeSWITCH recommends Debian as their installation platform as most of the development happens on that platform. In this article we see how to install &lt;a href=&#34;https://github.com/signalwire/freeswitch/releases/tag/v1.10.5&#34;&gt;FreeSWITCH 1.10.5&lt;/a&gt; on &lt;a href=&#34;https://releases.ubuntu.com/18.04/&#34;&gt;Ubuntu 18.04&lt;/a&gt;. Below are the list of steps we follow to install FreeSWITCH on Ubuntu:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Bring up a VM (I use Virtualbox) and install Ubuntu 18.04 server.&lt;/li&gt;&lt;li&gt;Install dependent packages to compile FreeSWITCH&lt;/li&gt;&lt;li&gt;Compile and build SpanDSP and sofia-sip&lt;/li&gt;&lt;li&gt;Download FreeSWITCH source, build and install&lt;/li&gt;&lt;li&gt;Make FreeSWITCH to run as a service&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;The scope of this article is to install and run FreeSWITCH successfully on Ubuntu 18.04. We don&amp;rsquo;t configure FreeSWITCH to handle incoming/outgoing calls.&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&#34;setup-ubuntu-1804-server&#34;&gt;Setup Ubuntu 18.04 server&lt;/h2&gt;&lt;p&gt;I use Virtualbox to create an Ubuntu 18.04 server with 30GB of hard disk space and 4GB of RAM. You can build the same or use a desktop or laptop running Ubuntu 18.04. If you want more information on how to install Ubuntu on Virtualbox refer to this &lt;a href=&#34;https://hibbard.eu/install-ubuntu-virtual-box/&#34;&gt;article&lt;/a&gt;.&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;install-dependent-packages-to-compile-freeswitch&#34;&gt;Install dependent packages to compile FreeSWITCH&lt;/h2&gt;&lt;p&gt;We need some dependent packages to compile FreeSWITCH code. FreeSWITCH is built on C/C++. Let&amp;rsquo;s install the packages on Ubuntu server using its package manager by &lt;code&gt;ssh&lt;/code&gt; into the server:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo apt -y update$ sudo apt-get install -y curl git gnupg wget subversion build-essential autoconf automake libtool libncurses5 libncurses5-dev make libjpeg-dev libtool libtool-bin libsqlite3-dev libpcre3-dev libspeexdsp-dev libldns-dev libedit-dev yasm liblua5.2-dev libopus-dev cmake&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;FreeSWITCH comes with lots of modules. For example, it has support for MySQL, MongoDB, PostgreSQL etc. Most of the deployments use only one database and want to disable the other. So, they don&amp;rsquo;t install dependent packages of the modules which they don&amp;rsquo;t need. But in our case we install FreeSWITCH with default modules enabled. Below is the list of additional packages we need:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo apt-get install -y libcurl4-openssl-dev libexpat1-dev libgnutls28-dev libtiff5-dev libx11-dev unixodbc-dev libssl-dev python-dev zlib1g-dev libasound2-dev libogg-dev libvorbis-dev libperl-dev libgdbm-dev libdb-dev libpq-dev uuid-dev libsndfile1-dev libavformat-dev libswscale-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have compile and build &lt;code&gt;libks&lt;/code&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git clone https://github.com/signalwire/libks.git$ cd libks$ cmake .$ make$ sudo make install$ sudo ldconfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;compile-and-build-spandsp-and-sofia-sip&#34;&gt;Compile and build SpanDSP and sofia-sip&lt;/h2&gt;&lt;p&gt;According to &lt;a href=&#34;https://freeswitch.org/confluence/display/freeswitch/freeswitch+1.10.x+Release+notes&#34;&gt;FreeSWITCH 1.10.x release notes&lt;/a&gt; SpanDSP and sofia-sip packages are removed from build. We need to compile and build them separately.&lt;/p&gt;&lt;p&gt;Execute the below commands to build sofia-sip:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git clone https://github.com/freeswitch/sofia-sip.git$ cd sofia-sip$ ./bootstrap.sh -j$ ./configure$ make$ sudo make install$ sudo ldconfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;p&gt;Execute the below commands to build SpanDSP:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git clone https://github.com/freeswitch/spandsp.git$ cd spandsp$ ./bootstrap.sh -j$ ./configure$ make$ sudo make install$ sudo ldconfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;download-freeswitch-source-build-and-install&#34;&gt;Download FreeSWITCH source, build and install&lt;/h2&gt;&lt;p&gt;We can download the FreeSWITCH release source code from &lt;a href=&#34;https://github.com/signalwire/freeswitch/releases&#34;&gt;Github releases&lt;/a&gt;. Execute the following commands to download, build and install FreeSWITCH:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ wget -q https://github.com/signalwire/freeswitch/archive/v1.10.5.tar.gz$ tar xf v1.10.5.tar.gz &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd freeswitch-1.10.5$ ./bootstrap.sh -j$ ./configure&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once &lt;code&gt;configure&lt;/code&gt; is successfully completed, &lt;code&gt;modules.conf&lt;/code&gt; file is created in &lt;code&gt;freeswitch-1.10.5&lt;/code&gt; folder. You can comment out unnecessary modules in &lt;code&gt;modules.conf&lt;/code&gt; file so that FreeSWITCH will not build those modules. As of now we will comment out only one module, &lt;code&gt;mod_signalwire&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sed -i -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s+^applications/mod_signalwire$+#applications/mod_signalwire+&amp;#39;&lt;/span&gt; ./modules.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s start the build:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ make$ sudo make install$ sudo ldconfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After successful installation we need to install default sounds and voice files.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo make -j -- cd-sounds-install cd-moh-install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;FreeSWITCH is installed at &lt;code&gt;/usr/local/freeswitch&lt;/code&gt; and the binaries are available at &lt;code&gt;/usr/local/freeswitch/bin&lt;/code&gt; folder.&lt;/p&gt;&lt;p&gt;Now you can run FreeSWITCH using:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cd /usr/local/freeswitch/bin$ sudo ./freeswitch -nonat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://freeswitch.org/confluence/pages/viewpage.action?pageId=1048948&#34;&gt;&lt;code&gt;fs_cli&lt;/code&gt;&lt;/a&gt; is a FreeSWITCH command-line interface that allows a user to connect to running FreeSWITCH instance. Open the other terminal and run:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cd  /usr/local/freeswitch/bin$ sudo ./fs_cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;make-freeswitch-to-run-as-a-service&#34;&gt;Make FreeSWITCH to run as a service&lt;/h2&gt;&lt;p&gt;By default FreeSWITCH will not be installed as a service in Ubuntu. Let&amp;rsquo;s make it a service&lt;/p&gt;&lt;p&gt;Add new group and user with less privileges to run FreeSWITCH service.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cd /usr/local$ sudo groupadd freeswitch$ sudo adduser --disabled-password  --quiet --system --home /usr/local/freeswitch --gecos &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FreeSWITCH Voice Platform&amp;#34;&lt;/span&gt; --ingroup freeswitch freeswitch$ sudo chown -R freeswitch:freeswitch /usr/local/freeswitch/$ sudo chmod -R ug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rwX,o&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; /usr/local/freeswitch/$ sudo chmod -R u&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rwx,g&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rx /usr/local/freeswitch/bin/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to add FreeSwitch as a &lt;code&gt;systemd&lt;/code&gt; unit file. Open new file &lt;code&gt;/etc/systemd/system/freeswitch.service&lt;/code&gt; using &lt;code&gt;vim&lt;/code&gt; editor paste the below content:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Unit&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;Description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;freeswitchWants&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;network-online.targetRequires&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;syslog.socket network.target local-fs.targetAfter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;syslog.socket network.target network-online.target local-fs.target&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Service&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;Type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;forkingEnvironment&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DAEMON_OPTS=-nonat&amp;#34;&lt;/span&gt;EnvironmentFile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-/etc/default/freeswitchExecStartPre&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/bin/chown -R freeswitch:freeswitch /usr/local/freeswitchExecStart&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/freeswitch/bin/freeswitch -u freeswitch -g freeswitch -ncwait $DAEMON_OPTSTimeoutSec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;45sRestart&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;alwaysRestartSec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;StartLimitInterval&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;StartLimitBurst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rootGroup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;daemonLimitCORE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;infinityLimitNOFILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;LimitNPROC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;60000&lt;/span&gt;LimitSTACK&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;250000&lt;/span&gt;LimitRTPRIO&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;infinityLimitRTTIME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;infinityIOSchedulingClass&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;realtimeIOSchedulingPriority&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;CPUSchedulingPolicy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rrCPUSchedulingPriority&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;UMask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0007&lt;/span&gt;NoNewPrivileges&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Install&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;WantedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Start FreeSWITCH service and enable it on system startup&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo chmod ugo+x freeswitch.service$ sudo systemctl start freeswitch.service$ sudo systemctl enable freeswitch.service&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now check status of FreeSWITCH service&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo systemctl status freeswitch.service&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../freeswitch_service.jpg&#34; alt=&#34;Freeswitch Service&#34;&gt;&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article we learnt how to install FreeSWITCH on Ubuntu 18.04. This is a default installation with all the modules included. Production ready installations remove lot of unnecessary modules which reduces build and load time. You can configure what modules need to be loaded during startup by changing &lt;code&gt;modules.conf.xml&lt;/code&gt; file under &lt;code&gt;/usr/local/freeswitch/conf/autoload_configs&lt;/code&gt; folder. In the coming articles we will see how to configure FreeSWITCH to handle simple inbound and outbound calls.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Effective Web Scraping with Python</title>
       <link>https://saisyam.com/effective-web-scraping-with-python/</link>
       <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
       
       <guid>https://saisyam.com/effective-web-scraping-with-python/</guid>
       <description>&lt;p&gt;Web scraping is a process of automatically extracting information from websites. Web scrapers are small programs written to crawl and extract specific information from a webpage. For example, getting latest news items from news websites like BBC, CNN etc.&lt;/p&gt;&lt;div id=&#34;toc&#34;&gt;    &lt;nav id=&#34;TableOfContents&#34;&gt;  &lt;ul&gt;    &lt;li&gt;&lt;a href=&#34;#why-scraping&#34;&gt;Why Scraping?&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#scraping-with-python&#34;&gt;Scraping with Python&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#challenges-while-scraping&#34;&gt;Challenges while scraping&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#python-packages-for-scraping&#34;&gt;Python packages for scraping&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#scraping-approach&#34;&gt;Scraping approach&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#using-proxies-for-ip-rotation&#34;&gt;Using proxies for IP rotation&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/nav&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;why-scraping&#34;&gt;Why Scraping?&lt;/h2&gt;&lt;p&gt;There are millions of websites on the Internet which have information on different topics. For example, news, travel, food, finance, business, tech, entertainment, to name a few. All these websites don&amp;rsquo;t have a proper way (APIs or feeds) of sharing data. So, we need scrape such websites to extract the information.&lt;/p&gt;&lt;p&gt;Scrapers parse the HTML elements of the page using tags, ids, class names etc to get the required content from the page. Consider the following simple HTML page:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;Sample HTML page&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&amp;gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Scraping with Python&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;summary&amp;#34;&lt;/span&gt;&amp;gt;This article explains how web scraping is done in Python and the packages required.&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;By Saisyam&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above HTML snippet contains tags like, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;h1&lt;/code&gt;, and &lt;code&gt;p&lt;/code&gt;. We can extract the &lt;code&gt;div&lt;/code&gt; element with &lt;code&gt;id=main&lt;/code&gt; and then extract text between &lt;code&gt;h1&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; tags under the &lt;code&gt;div&lt;/code&gt; element. We can identify specific tags using &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; or any other attributes.&lt;/p&gt;&lt;h2 id=&#34;scraping-with-python&#34;&gt;Scraping with Python&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s easy to write scrapers in Python. Python has a rich set of tools or packages to perform scraping effectively. The below code snippet parses the above HTML and extracts the information required:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scrape&lt;/span&gt;():    soup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BeautifulSoup(html, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;html5lib&amp;#39;&lt;/span&gt;)    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_text()    div &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;})    heading &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; div&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_text()    summary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; div&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;,{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;summary&amp;#39;&lt;/span&gt;})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_text()    ptags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; div&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_all(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;)    author &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptags[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_text()    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;: title,        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;heading&amp;#39;&lt;/span&gt;: heading,        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;summary&amp;#39;&lt;/span&gt;: summary,        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;: author    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code uses &lt;code&gt;Beautifulsoup&lt;/code&gt; package. The response of the above function is:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sample HTML page&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;heading&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Scraping with Python&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;summary&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This article explains how web scraping is done in Python and the packages required.&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;By Saisyam&amp;#34;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;challenges-while-scraping&#34;&gt;Challenges while scraping&lt;/h2&gt;&lt;p&gt;Not all web pages are so simple as shown in the above example. Below is the list of challenges that we encounter while scraping:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Dynamic content&lt;/strong&gt; - Today most of the websites use latest JavaScript frameworks to build their sites. The content or the HTML that is rendered is generated dynamically with JavaScript. You need a real browser to load the webpage inorder to get the rendered HTML&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Getting blocked&lt;/strong&gt; - Websites will block your IP address if they see a continuous traffic from you. While developing the scraper you will continuously hit their website which makes the website think of a suspicious activity and block your IP. If possible download the static HTML page and build your scraper. Most scrapers use proxy IP addresses to solve this problem.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Captcha&lt;/strong&gt; - Most websites will check whether you are a human or not when they detect a suspicious activity as mentioned in point &lt;strong&gt;#2&lt;/strong&gt;. Always try to avoid this situation. Though there are captcha solving tools, they are not 100% reliable or accurate.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;python-packages-for-scraping&#34;&gt;Python packages for scraping&lt;/h2&gt;&lt;p&gt;In order to parse HTML, first we need to get the HTML of the page. There are two ways in Python to get the HTML content of the page:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Using &lt;code&gt;requests&lt;/code&gt; package&lt;/strong&gt; - &lt;a href=&#34;https://requests.readthedocs.io/en/master/&#34;&gt;Requests&lt;/a&gt; is a Python package, HTTP library built for humans. We use &lt;code&gt;requests.get()&lt;/code&gt; method to get the HTML content of a page. The advantage of this is, it is fast and simple but will not get the dynamically loaded content as it is not a browser to execute JavaScript.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Using &lt;code&gt;splinter&lt;/code&gt; package&lt;/strong&gt; - &lt;a href=&#34;https://splinter.readthedocs.io/en/latest/&#34;&gt;Splinter&lt;/a&gt; is a Python package used to test web applications. Splinter uses webdrivers (Chrome, Firefox etc) to load a web page and get HTML. You need to have browser application and associated webdriver to make it work. With Splinter we can get dynamically loaded content as well.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;scraping-approach&#34;&gt;Scraping approach&lt;/h2&gt;&lt;p&gt;The approach that we follow for creating scrapers are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Get HTML content of the website using &lt;code&gt;requests&lt;/code&gt; or &lt;code&gt;splinter&lt;/code&gt; based on the requirement.&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;Beautifulsoup&lt;/code&gt; to parse the HTML and extract the content. &lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34;&gt;BeautifulSoup&lt;/a&gt; is a Python package used to parse HTML content. &lt;code&gt;Beautifulsoup&lt;/code&gt; supports multiple HTML parsers. &lt;code&gt;html5lib&lt;/code&gt; is a parser built completely in Python and considered as the fastest among the existing parsers.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Getting the complete HTML content is a complex activity, because of the challenges explained in the above section. We avoid using single IP address and use proxies and rotate our IPs. There are some free proxy providers like &lt;a href=&#34;https://sslproxies.org/&#34;&gt;SSLProxy&lt;/a&gt;, &lt;a href=&#34;https://spys.one/en/https-ssl-proxy/&#34;&gt;SpysOne&lt;/a&gt;, &lt;a href=&#34;https://www.proxy-list.download/HTTPS&#34;&gt;ProxyList&lt;/a&gt; to name a few.&lt;/p&gt;&lt;p&gt;If you don&amp;rsquo;t want to deal with all the mess and do just parsing the content, use &lt;a href=&#34;https://www.scraperapi.com/&#34;&gt;ScraperAPI&lt;/a&gt;. It is a proxy API for web scraping. Scraper API handles proxies, browsers, and CAPTCHAs, so you can get the HTML from any web page with a simple API call!. Check out &lt;a href=&#34;https://www.scrapingbee.com/&#34;&gt;ScrapingBee&lt;/a&gt; as well.&lt;/p&gt;&lt;h2 id=&#34;using-proxies-for-ip-rotation&#34;&gt;Using proxies for IP rotation&lt;/h2&gt;&lt;p&gt;You can tell &lt;code&gt;requests&lt;/code&gt; API to use proxies to fetch html.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;proxies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;191.96.16.209:3129&amp;#34;&lt;/span&gt;}resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url, proxies&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;proxies)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your request will go through the proxy address provided. Use HTTP proxies to skip SSL verification step which happens in case of HTTPS proxies.&lt;/p&gt;&lt;p&gt;In a similar way, we can use proxies with Splinter as well. We use Chrome browser here.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;proxy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;191.96.16.209:3129&amp;#34;&lt;/span&gt;chrome_options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ChromeOptions()chrome_options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--proxy-server=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; proxy)browser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Browser(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chrome&amp;#39;&lt;/span&gt;, options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;chrome_options)browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;visit(url)html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If one IP gets blocked, you can get an another one and continue scraping.&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article we learnt what is scraping and why it is required. We have explored few packages in Python to do scraping and identified challenges in scraping along with few solutions to overcome those challenges. For more information on scraping visit my &lt;a href=&#34;https://github.com/saisyam/scrapers&#34;&gt;Scrapers&lt;/a&gt; repository on Github. Happy scraping!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Reading and Writing WAV files with compression in Python using Pywav</title>
       <link>https://saisyam.com/reading-and-writing-wav-files-with-compression-in-python-using-pywav/</link>
       <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
       
       <guid>https://saisyam.com/reading-and-writing-wav-files-with-compression-in-python-using-pywav/</guid>
       <description>&lt;p&gt;Testing voice applications involve handling RTP streams. Most of the IVR applications use PCMA/PCMU codecs to stream voice over RTP. &lt;a href=&#34;https://pypi.org/project/pywav/&#34;&gt;PyWav&lt;/a&gt; is a Python library which helps you to convert those RAW streams with PCMU/PCMA encodings into a WAV file. The library is similar to &lt;a href=&#34;https://pypi.org/project/PyWave/&#34;&gt;PyWave&lt;/a&gt;, but the limitation with PyWave is, it will not support compression.&lt;/p&gt;&lt;div id=&#34;toc&#34;&gt;    &lt;nav id=&#34;TableOfContents&#34;&gt;  &lt;ul&gt;    &lt;li&gt;&lt;a href=&#34;#what-is-pywav&#34;&gt;What is PyWav?&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#reading-a-wav-file&#34;&gt;Reading a WAV file&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#writing-a-wav-file&#34;&gt;Writing a WAV file&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/nav&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;what-is-pywav&#34;&gt;What is PyWav?&lt;/h2&gt;&lt;p&gt;When building a SIP test tool, I have to convert RTP audio streams with PCMA/PCMU encodings to WAV files for validation. PyWav is the result of that activity. Using PyWav you can write RAW streams into a playable WAV file supporting PCM/PCMA/PCMU compressions. Similarly, you can even read a WAV and get the RAW data from that WAV file to send it over RTP stream.&lt;/p&gt;&lt;h2 id=&#34;reading-a-wav-file&#34;&gt;Reading a WAV file&lt;/h2&gt;&lt;p&gt;Below sample code shows how to read a WAV file:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;wave_read &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pywav&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WavRead(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;filename to read&amp;gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;# print parameters like number of channels, sample rate, bits per sample, audio format etc&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Audio format 1 = PCM (without compression)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Audio format 6 = PCMA (with A-law compression)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Audio format 7 = PCMU (with mu-law compression)&lt;/span&gt;print(wave_read&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getparams())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Following are the list of parameters that are extracted from the WAV file:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Number of channels&lt;/li&gt;&lt;li&gt;Sample rate&lt;/li&gt;&lt;li&gt;Byte rate&lt;/li&gt;&lt;li&gt;Bytes per sample&lt;/li&gt;&lt;li&gt;Bits per sample&lt;/li&gt;&lt;li&gt;Sample length&lt;/li&gt;&lt;li&gt;Data (raw data)&lt;/li&gt;&lt;li&gt;Audio format&lt;/li&gt;&lt;li&gt;Extra params&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To know more about WAV files and formats refer &lt;a href=&#34;http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;writing-a-wav-file&#34;&gt;Writing a WAV file&lt;/h2&gt;&lt;p&gt;You can write the RAW data captured from the RTP stream into a WAV file using the following sample:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# first parameter is the file name to write the wave data&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# second parameter is the number of channels, the value can be 1 (mono) or 2 (stereo)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# third parameter is the sample rate, 8000 samples per second&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fourth paramaer is the bits per sample, 8 bits per sample&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fifth parameter is the audio format, 1 means PCM with no compression.&lt;/span&gt;wave_write &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pywav&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WavWrite(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;filename to write&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;# raw_data is the byte array. Write can be done only once for now.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Incremental write will be implemented later&lt;/span&gt;wave_write&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;raw data&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;# close the file stream and save the file&lt;/span&gt;wave_write&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;You can install this as a &lt;code&gt;pip&lt;/code&gt; package using &lt;code&gt;pip3 install pywav&lt;/code&gt;. The source code of this project is available on &lt;a href=&#34;https://github.com/saisyam/pywav&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>What are Cloud native apps?</title>
       <link>https://saisyam.com/what-are-cloud-native-apps/</link>
       <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
       
       <guid>https://saisyam.com/what-are-cloud-native-apps/</guid>
       <description>&lt;p&gt;Cloud native is an approach to building and running applications that exploits the advantages of the cloud computing delivery model. In simple terms, Cloud native applications are built using cloud-based technologies, fully hosted and managed in the cloud.&lt;/p&gt;&lt;div id=&#34;toc&#34;&gt;    &lt;nav id=&#34;TableOfContents&#34;&gt;  &lt;ul&gt;    &lt;li&gt;&lt;a href=&#34;#cloud-native-approach&#34;&gt;Cloud Native approach&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#microservices&#34;&gt;Microservices&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#containers&#34;&gt;Containers&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#devops&#34;&gt;DevOps&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#cicd&#34;&gt;CI/CD&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#advantages-of-cloud-native-development-approach&#34;&gt;Advantages of Cloud native development approach&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#cloud-native-approach---things-to-consider&#34;&gt;Cloud native approach - Things to consider&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/nav&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;cloud-native-approach&#34;&gt;Cloud Native approach&lt;/h2&gt;&lt;p&gt;Here we will discuss about the four major components of Cloud native development:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Microservices&lt;/li&gt;&lt;li&gt;Containers&lt;/li&gt;&lt;li&gt;DevOps&lt;/li&gt;&lt;li&gt;CI/CD&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;microservices&#34;&gt;Microservices&lt;/h2&gt;&lt;p&gt;Microservices are small modular and loosely coupled services. Each microservice will perform a single task, &lt;a href=&#34;https://en.wikipedia.org/wiki/Single-responsibility_principle&#34;&gt;single responsibility principle&lt;/a&gt;. Loose coupling and service based design will help organizations increase their application creation speed without increasing complexity. Microservices run in their own process and communicate via HTTP APIs or messaging. Each microservice can be deployed, upgraded, scaled and restarted independent of other services in the application.&lt;/p&gt;&lt;h2 id=&#34;containers&#34;&gt;Containers&lt;/h2&gt;&lt;p&gt;Containers (running instances of dockers) provide both efficiency and speed when compared to virtual machines. They use Operating System (OS) level virtualization, where one instance of OS services is divided across various containers. To know more about dockers and containers read my article &lt;a href=&#34;https://saisyam.com/understanding-dockers-and-containers/&#34;&gt;here&lt;/a&gt;. The low overhead of creating/destroying and starting/stopping containers make them ideal to deploy microservices. We can run multiple containers in a single VM.&lt;/p&gt;&lt;h2 id=&#34;devops&#34;&gt;DevOps&lt;/h2&gt;&lt;p&gt;DevOps is a collaboration between developers and operations with a goal of constantly delivering high quality software. Early adoption of DevOps culture into the organization will help accelerate the path to cloud0-native applications and deploy apps faster and more efficiently. DevOps adoption not only relies on tools and technologies, but also the mindset, willingness and trust of the people to collaborative to develop and deliver applications.&lt;/p&gt;&lt;h2 id=&#34;cicd&#34;&gt;CI/CD&lt;/h2&gt;&lt;p&gt;CI/CD is all about shipping small batches of software to production frequently through automation. Automation of continuous delivery will help organizations to quicky and efficiently deliver updated software to production without bringing down the whole system.&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;advantages-of-cloud-native-development-approach&#34;&gt;Advantages of Cloud native development approach&lt;/h2&gt;&lt;p&gt;Our traditional development approach is mostly monolith. We will create an application with different modules doing differen tasks. For example, in a shopping cart application, we have modules for product management, user management, billing, etc. But all these are tightly coupled with each other which makes it difficult to make any changes to an individual module without disturbing the others.&lt;/p&gt;&lt;p&gt;This is a successful model till date. Then &lt;strong&gt;why we need to shift to cloud native approach?&lt;/strong&gt; To answer this, let&amp;rsquo;s see the differences between traditional and cloud native approaches from different perspectives. Below table will illustrate that:&lt;/p&gt;&lt;div class=&#34;my-table&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;Traditional Approach&lt;/th&gt;&lt;th&gt;Cloud native Approach&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Development Methodology&lt;/td&gt;&lt;td&gt;Waterfall&lt;/td&gt;&lt;td&gt;Agile, DevOps, CI/CD&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Design/Architecture&lt;/td&gt;&lt;td&gt;Tightly coupled, monolith&lt;/td&gt;&lt;td&gt;loosely coupled, API/Message based communication, single responsibility principle&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Workforce&lt;/td&gt;&lt;td&gt;Isolated development, operations, QA and delivery teams&lt;/td&gt;&lt;td&gt;DevOps teams&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Delivery&lt;/td&gt;&lt;td&gt;Long cycles&lt;/td&gt;&lt;td&gt;Short and Continuous&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Infrastructure&lt;/td&gt;&lt;td&gt;OS Dependent, Vertically scaled, Pre-provisioned for peak load&lt;/td&gt;&lt;td&gt;OS independent, horizontal scaling, on-demand capacity&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Maintenance/Recovery&lt;/td&gt;&lt;td&gt;In case of failure, whole system will go down, slow recovery&lt;/td&gt;&lt;td&gt;Fast recovery, whole system will never go down&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h2 id=&#34;cloud-native-approach---things-to-consider&#34;&gt;Cloud native approach - Things to consider&lt;/h2&gt;&lt;p&gt;Though cloud native approach looks promising with more advantages over traditional approach and improves the efficiency and productivity of the team, it comes with a price. Below are some of the things that need to be considered while designing cloud native apps.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;How to split the application into independent logic units or services?&lt;/li&gt;&lt;li&gt;How to connect individual microservices so that the aggregate serves as a complete application?&lt;/li&gt;&lt;li&gt;Monitoring the health of Microservices (dead/alive) is important to make sure the request is handled properly&lt;/li&gt;&lt;li&gt;Debugging of microservices will be daunting if the number of microservices are more&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;There are tools which are production ready to solve the above issues. Discussion of these tools will take another post.&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Most of the organizations are moving their applications from private datacenters to public cloud platforms using cloud native architectural precepts. Learning and investing time on Cloud native applications will definitely uplift your resume/CV. In the next article we will discuss how to build a cloud native application from scratch and deploy it. Thanks for reading.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Understanding Dockers and Containers</title>
       <link>https://saisyam.com/understanding-dockers-and-containers/</link>
       <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
       
       <guid>https://saisyam.com/understanding-dockers-and-containers/</guid>
       <description>&lt;p&gt;Dockers and containers are the building blocks for Cloud native development. Docker enables developers to build, run and ship applications that can be virtually run on any Operating System (OS). A running instance of a docker is called Container. In this article we will discuss about hardware and OS Virtualization, how docker works, docker workflow and commands to create and run docker.&lt;/p&gt;&lt;div id=&#34;toc&#34;&gt;    &lt;nav id=&#34;TableOfContents&#34;&gt;  &lt;ul&gt;    &lt;li&gt;&lt;a href=&#34;#hardware-virutalization-vs-os-level-virtualization&#34;&gt;Hardware Virutalization vs OS Level Virtualization&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#what-are-containers&#34;&gt;What are Containers?&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#what-is-a-docker&#34;&gt;What is a Docker?&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#lets-run-a-nginx-docker&#34;&gt;Let&amp;rsquo;s run a Nginx docker&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#docker-workflow&#34;&gt;Docker workflow&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/nav&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;p&gt;Docker bought a revolutionary change in Cloud Computing. Docker is inspired by a technology in Linux kernel called &lt;a href=&#34;https://linuxcontainers.org/&#34;&gt;LXC (Linux Containers)&lt;/a&gt;. LXC refers to the capabilites of Linux kernel, specifically namespaces and control groups, which allow sandboxing of processes from one another, and controlling their resource allocations. Docker utilizes the capabilities of LXC and hence it does not require any OS, instead it relies on the OS own functionality. LXC is a OS level virutalization method for running multiple isolated Linux systems (we call them containers) on a control host using a single Linux kernel.&lt;/p&gt;&lt;h2 id=&#34;hardware-virutalization-vs-os-level-virtualization&#34;&gt;Hardware Virutalization vs OS Level Virtualization&lt;/h2&gt;&lt;p&gt;If you use &lt;a href=&#34;https://www.vmware.com/in.html&#34;&gt;VMWare&lt;/a&gt; or &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;Virtualbox&lt;/a&gt;, then you are already using hardware virtualization. Below diagram shows the difference between the two.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://saisyam.com/assets/images/blog/virtualization.jpg&#34; alt=&#34;Virtualization&#34;&gt;&lt;/p&gt;&lt;p&gt;The primary advantage of OS virtualiation is that multiple workloads can run on a single OS instance. With hardware virtualization (VMs), the hardware is being virtualized to run multiple OS instances.&lt;/p&gt;&lt;h2 id=&#34;what-are-containers&#34;&gt;What are Containers?&lt;/h2&gt;&lt;p&gt;OS virtualization had grown tremendously over the last decade. Containers sit on top of a physical server and its host OS (Linux/Windows). Each container shares the host OS kernel and libraries in a read-only mode. Containers are thus exceptionally light (few mega bytes) and will start in few seconds when compared to a VM. Containers’ speed, agility, and portability make them the primary tool to help building cloud native apps.&lt;/p&gt;&lt;h2 id=&#34;what-is-a-docker&#34;&gt;What is a Docker?&lt;/h2&gt;&lt;p&gt;Docker is a layered binary file with all the necessary ingredients to run an application. For example, I want to use PostgreSQL database in my project and I don&amp;rsquo;t want to install it on my machine. I can download PostgreSQL docker from &lt;a href=&#34;https://hub.docker.com/_/postgres&#34;&gt;docker hub&lt;/a&gt; and run it with &lt;code&gt;docker&lt;/code&gt; command and use it for my development. You can also create your own docker for your application and upload that to docker hub for others to use. You can install docker community edition from &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;lets-run-a-nginx-docker&#34;&gt;Let&amp;rsquo;s run a Nginx docker&lt;/h2&gt;&lt;p&gt;In this section we will download and run nginx docker. &lt;a href=&#34;https://www.nginx.com/&#34;&gt;Nginx&lt;/a&gt; is a popular web server that is used in most of the production ready environments. In the process we will learn some basic docker commands.&lt;/p&gt;&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/saisyam/73e26c570f472ea4ff4d1576d6208a3f.js&#34;&gt;&lt;/script&gt;&lt;p&gt;The above command &lt;code&gt;docker run -p 80:80 nginx&lt;/code&gt; will pull &lt;code&gt;nginx&lt;/code&gt; from &lt;a href=&#34;https://hub.docker.com/_/nginx&#34;&gt;docker hub&lt;/a&gt; as I don&amp;rsquo;t have it locally and runs it on port 80:80 (local:container). If I go to &lt;code&gt;http://localhost/&lt;/code&gt; I will see nginx default html page with &lt;code&gt;Welcome to nginx!&lt;/code&gt; message. To kill it, simply press CTRL+C. To run the docker in the background or as daemon we will add &lt;code&gt;-d&lt;/code&gt; option to the above command. List of some basic commands below:&lt;/p&gt;&lt;div class=&#34;my-table&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;docker images&lt;/td&gt;&lt;td&gt;Prints all local images&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;docker run &lt;image&gt;&lt;/td&gt;&lt;td&gt;Run a docker image&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;docker run -p &amp;lt;host-port:container-port&amp;gt; &amp;lt;image&amp;gt;&lt;/td&gt;&lt;td&gt;Run docker image with port forwarding from host to container&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;docker run -d &amp;lt;image&amp;gt;&lt;/td&gt;&lt;td&gt;Run docker image as daemon or in the background&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;docker run -e &amp;lt;environment variable&amp;gt; &amp;lt;image&amp;gt;&lt;/td&gt;&lt;td&gt;Run docker image with defined environment variable&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;docker ps&lt;/td&gt;&lt;td&gt;Displays all running containers&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;docker ps &amp;ndash;all&lt;/td&gt;&lt;td&gt;Displays all containers including idle ones&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;docker kill &amp;lt;container-id&amp;gt;&lt;/td&gt;&lt;td&gt;Kill (force kill) the running docker image with the container id&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;docker rm &amp;lt;container-id&amp;gt;&lt;/td&gt;&lt;td&gt;Remove the container&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h2 id=&#34;docker-workflow&#34;&gt;Docker workflow&lt;/h2&gt;&lt;p&gt;Below diagram shows the docker workflow. I have taken this image from a LinkedIn training.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://saisyam.com/assets/images/blog/docker_workflow.jpg&#34; alt=&#34;Docker Workflow&#34;&gt;&lt;/p&gt;&lt;p&gt;At a high level the image explains:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Building docker images from docker file&lt;/li&gt;&lt;li&gt;Tagging docker images&lt;/li&gt;&lt;li&gt;Pushing docker images to docker hub&lt;/li&gt;&lt;li&gt;Pulling images from docker hub&lt;/li&gt;&lt;li&gt;Running docker images&lt;/li&gt;&lt;li&gt;Starting/stopping/restarting docker containers&lt;/li&gt;&lt;li&gt;Loading and saving docker images externally&lt;/li&gt;&lt;/ol&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article we learn what is docker and container? We have learnt how to download and run a docker and some basic commands on managing docker images and containers. We have looked into docker workflow. In the coming articles we will see how to create our own docker and publish to docker hub. Thanks for reading.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Sentiment Analysis using Python Vader</title>
       <link>https://saisyam.com/sentiment-analysis-using-python-vader/</link>
       <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
       
       <guid>https://saisyam.com/sentiment-analysis-using-python-vader/</guid>
       <description>&lt;p&gt;Sentiment analysis is a process of determining whether the given emotion (text) is postivie, negative or neutral. Sentiment Analysis is useful in identifying customers emotions for a service or product. In this article we will perform sentiment analysis on restaurant reviews.&lt;/p&gt;&lt;div id=&#34;toc&#34;&gt;    &lt;nav id=&#34;TableOfContents&#34;&gt;  &lt;ul&gt;    &lt;li&gt;&lt;a href=&#34;#installing-vader-sentiment-analysis-tool&#34;&gt;Installing VADER Sentiment Analysis Tool&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#performing-sentiment-analysis&#34;&gt;Performing Sentiment Analysis&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#what-is-missing-with-vader-sentiment-analysis&#34;&gt;What is missing with VADER Sentiment Analysis?&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/nav&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;p&gt;VADER(Valence Aware Dictionary and sEntiment Reasoner) is a lexicon and rule-based sentiment analysis tool that is specifically attuned to sentiments expressed in social media. VADER not only tells about the positivity and negativity score but also tells us about how positive or negative it is. VADER sentimental analysis relies on a dictionary that maps lexical features to emotion intensities known as sentiment scores. The sentiment score of a text can be obtained by summing up the intensity of each word in the text.&lt;/p&gt;&lt;p&gt;For example, words like, &lt;em&gt;&amp;lsquo;happy&amp;rsquo;, &amp;lsquo;awesome&amp;rsquo;, &amp;lsquo;good&amp;rsquo;&lt;/em&gt; all convey positive emotion. VADER is intelligent enough to understand the context of these words. For example, &lt;em&gt;&amp;ldquo;Food is not good&amp;rdquo;&lt;/em&gt; is considered negative. If also understands the emphasis of capitalization and punctuation. For example, &lt;em&gt;&amp;ldquo;AWESOME&amp;rdquo;&lt;/em&gt; (capital letters) will represent the high intensity of positivity.&lt;/p&gt;&lt;h2 id=&#34;installing-vader-sentiment-analysis-tool&#34;&gt;Installing VADER Sentiment Analysis Tool&lt;/h2&gt;&lt;p&gt;VADER is available as part of NLTK Python package. I use &lt;code&gt;pip3&lt;/code&gt; to install Python packages. Below command will install &lt;code&gt;nltk&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ pip3 install nltk&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once &lt;code&gt;nltk&lt;/code&gt; is installed, we need to download the &lt;code&gt;vader lexicon&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nltk&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; nltk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;download(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vader_lexicon&amp;#39;&lt;/span&gt;)[nltk_data] Downloading package vader_lexicon to[nltk_data]     &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;saisyam&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;nltk_data&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will install required data for using VADER sentiment analysis.&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;performing-sentiment-analysis&#34;&gt;Performing Sentiment Analysis&lt;/h2&gt;&lt;p&gt;We have everything installed to perform the sentiment analysis. Let&amp;rsquo;s use VADER to find the sentiment of the following review:&lt;/p&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;Pretty pricey but the lamb burger ($25) is beyond amazing. Definitely worth it. So, so good.&amp;quot;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The following code will perform the sentiment analysis.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; nltk.sentiment.vader &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; SentimentIntensityAnalyzersia &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SentimentIntensityAnalyzer()text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pretty pricey but the lamb burger ($25) is beyond amazing. Definitely worth it. So, so good.&amp;#34;&lt;/span&gt;sia&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;polarity_scores(text)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we run the above code we get the following output:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neg&amp;#39;&lt;/span&gt;: 0.0, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neu&amp;#39;&lt;/span&gt;: 0.369, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pos&amp;#39;&lt;/span&gt;: 0.631, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;compound&amp;#39;&lt;/span&gt;: 0.963&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;VADER&amp;rsquo;s &lt;code&gt;SentimentIntensityAnalyzer()&lt;/code&gt; takes in a string and returns a dictionary of scores in each of four categories:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;negative&lt;/li&gt;&lt;li&gt;neutral&lt;/li&gt;&lt;li&gt;positive&lt;/li&gt;&lt;li&gt;compound (computed by normalizing the scores above)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The above result says that the emotion in the given review is &lt;em&gt;positive&lt;/em&gt;. Let&amp;rsquo;s look at the other review:&lt;em&gt;&amp;ldquo;The food is so good. The service is so bad.&amp;quot;&lt;/em&gt;When we run the above code for the given text, the output is:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neg&amp;#39;&lt;/span&gt;: 0.277, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neu&amp;#39;&lt;/span&gt;: 0.493, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pos&amp;#39;&lt;/span&gt;: 0.23, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;compound&amp;#39;&lt;/span&gt;: -0.1901&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The review has two polarities. The customer is appreciating the food but not satisfied with the service. To judge whether the review is positive or negative we use the below logic.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; compound &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;:    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Positive&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; compound &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;:    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Negative&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Neutral&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which says the above review is &lt;em&gt;negative&lt;/em&gt;.&lt;/p&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;what-is-missing-with-vader-sentiment-analysis&#34;&gt;What is missing with VADER Sentiment Analysis?&lt;/h2&gt;&lt;p&gt;VADER only tries to get the emotion (postivie/negative/neutral) out of text. It won&amp;rsquo;t care about the aspect. For example, the review,&lt;em&gt;&amp;ldquo;The food is so good. The service is so bad.&amp;quot;&lt;/em&gt; is &lt;em&gt;negative&lt;/em&gt; from the &lt;code&gt;service&lt;/code&gt; aspect but &lt;em&gt;postive&lt;/em&gt; from the &lt;code&gt;food&lt;/code&gt; aspect. If we identify sentiment based on aspects then it will be much more helpful. This is called &lt;em&gt;Aspect based Sentiment Analysis&lt;/em&gt;.&lt;/p&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this post we have learnt how to find whether the text is positive, negative or neutral using Python based VADER Sentiment Analysis. We also discussed the next level of sentiment analysis based on aspects. In the next article we will see how we can identify aspects for a given industry or domain and implement the sentiment analysis based on aspects.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Proven way to Fake Webcam in Test Automation with Python</title>
       <link>https://saisyam.com/proven-way-to-fake-webcam-in-test-automation-with-python/</link>
       <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
       
       <guid>https://saisyam.com/proven-way-to-fake-webcam-in-test-automation-with-python/</guid>
       <description>&lt;p&gt;We automate web application testing using Python Selenium or Splinter. How will you automate testing applications with webcam? You can fake a webcam device with Chrome Web driver. In this article we will see how to do that.&lt;/p&gt;&lt;div id=&#34;toc&#34;&gt;    &lt;nav id=&#34;TableOfContents&#34;&gt;  &lt;ul&gt;    &lt;li&gt;&lt;a href=&#34;#challenge&#34;&gt;Challenge&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#chrome-settings-to-fake-webcam&#34;&gt;Chrome Settings to fake webcam&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/nav&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;challenge&#34;&gt;Challenge&lt;/h2&gt;&lt;p&gt;The challenge here is to fake the webcam with proper video format. In this post I am using Chrome browser along with &lt;a href=&#34;https://splinter.readthedocs.io/en/latest/&#34;&gt;Splinter&lt;/a&gt;.If you are new to Splinter, check out my article and I promise you love it. We use Splinter not only for testing but also for web scraping. Chrome need Y4M format to replace the camera feed. To generate that format you need &lt;a href=&#34;https://www.ffmpeg.org/&#34;&gt;ffmpeg&lt;/a&gt; tool. Using that tool you can convert any MP4 video into Y4M format.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Y4M is an un-compressed format. The converted Y4M file size will be almost three times the MP4 file. So, take a small MP4 file or repeat the image to create the video.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Once you have the Y4M file you can follow the below mentioned steps to fake the webcam. &lt;a href=&#34;https://testrtc.com/y4m-video-chrome/&#34;&gt;Here&lt;/a&gt; is an article on how to create Y4M files using &lt;a href=&#34;https://www.ffmpeg.org/&#34;&gt;ffmpeg&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;chrome-settings-to-fake-webcam&#34;&gt;Chrome Settings to fake webcam&lt;/h2&gt;&lt;p&gt;We will set &lt;code&gt;webdriver.ChromeOptions&lt;/code&gt; to enable media stream using a fake device.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;chrome_options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ChromeOptions()chrome_options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--use-fake-device-for-media-stream&amp;#34;&lt;/span&gt;)chrome_options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--use-file-for-fake-video-capture=./salma_hayek.y4m&amp;#34;&lt;/span&gt;)chrome_options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_experimental_option(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prefs&amp;#34;&lt;/span&gt;, {    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;profile.default_content_setting_values.media_stream_camera&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;&lt;ins class=&#34;adsbygoogle&#34;     style=&#34;display:block; text-align:center;&#34;     data-ad-layout=&#34;in-article&#34;     data-ad-format=&#34;fluid&#34;     data-ad-client=&#34;ca-pub-0206245742790279&#34;     data-ad-slot=&#34;3890452391&#34;&gt;&lt;/ins&gt;&lt;script&gt;     (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;You are all set to test the web applications uing a fake video. The complete source code along with the sample web application (using Python Flask) is available as a &lt;a href=&#34;https://gitlab.com/saisyam/web-automation-testing/-/tree/master/fake_webcam&#34;&gt;gitlab project&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
